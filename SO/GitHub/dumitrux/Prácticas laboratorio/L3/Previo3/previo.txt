ejemplo_fork1:
Soy el proceso 6509 (Padre)
Soy el proceso 6510 (Hijo)

ejemplo_fork1.c : fork/getpid. Los dos procesos ejecutan el mismo codigo


ejemplo_fork2:
Antes del fork: Soy el proceso 7256
PADRE: Soy el proceso 7256
Los DOS: Soy el proceso 7256
HIJO: Soy el proceso 7257
Los DOS: Soy el proceso 7257

ejemplo_fork2.c : fork/getpid. Cada proceso ejecuta un trozo de codigo diferente y al final otra vez el mismo.


ejemplo_fork3:
Antes del fork: Soy el proceso 7271
PADRE: Soy el proceso 7271
Solo lo ejecuta el padre: Soy el proceso 7271
HIJO: Soy el proceso 7272

ejemplo_fork3.c : fork/exit/getpid. El proceso hijo ejecuta un trozo de codigo diferente al del padre. 


ejemplo_fork4:
Antes del fork: Soy el proceso 7278
PADRE: Soy el proceso 7278
Solo lo ejecuta el padre: Soy el proceso 7278
HIJO: Soy el proceso 7279
HIJO acaba: Soy el proceso 7279

ejemplo_fork4.c : fork/exit/getpid. Comprobamos la herencia del espacio de direcciones. 


ejemplo_fork5:
Antes del fork: Soy el proceso 7374
PADRE: Soy el proceso 7374
HIJO: Soy el proceso 7375
HIJO:La variable_global vale A y la local a
PADRE:La variable_global vale A y la local a
Solo lo ejecuta el padre: Soy el proceso 7374

ejemplo_fork5.c : No todos los problemas tienen que ver con el fork.


ejemplo_fork6:
Antes del fork: Soy el proceso 8239
PADRE: Soy el proceso 8239
PADRE:La variable_global vale b
...
HIJO: Soy el proceso 8240
PADRE:La variable_global vale b
HIJO:La variable_global vale B
...
HIJO:La variable_global vale B
PADRE:La variable_global vale c
...
PADRE:La variable_global vale c
HIJO:La variable_global vale B
PADRE:La variable_global vale c
HIJO:La variable_global vale C
...
PADRE:La variable_global vale k
HIJO:La variable_global vale K
Solo lo ejecuta el padre: Soy el proceso 8239
HIJO:La variable_global vale K
...

ejemplo_fork6.c : fork/exit/getpid. Comprobamos el efecto del scheduler. 

Padre e hijo imprimen 100.000 veces el estado de su variable_global, la CPU va alternando qué proceso se ejecuta en cada momento, 
para que ninguno acapare la cpu. No se puede asegurar que la CPU lo ejecute en el mismo orden. 


ejemplo_fork7:
No tiene nada que ver con la creación de procesos, el problema es que la función Escribe_variables no sabe qué es variable_local,
ya que no está en su entorno de visibilidad.


ejemplo_exec1:
Aparece en pantalla: "Soy el proceso: 11995" y la misma salida que si se hiciera el comando ls -l.
Una sola vez, se debe a que el código del proceso es reemplazado por el código del proceso llamado con execlp.


ejemplo_exec2:
Aparecen los siguientes mensajes:
Soy el proceso: 12144
Soy el proceso 12144
Soy el proceso 12145

La primera línea pertenece al ejecutable ejemplo_exec2 que luego muta (reemplaza todo su código, datos y pila) 
por el del ejecutable ejemplo_fork1 que imprime las siguientes dos líneas. 
El padre tiene el mismo PCB cuando muta, por lo tanto sólo se ejecutan dos procesos:
1. El de ejemplo_exec2 que luego muta a ejemplo_fork1.
2. El hijo que crea el primer proceso.
