PREGUNTA 18:
Para saber el PID de sus hijos, no se puede hacer directamente puesto que en el PCB solo se almacena el PID del padre. 
Sin embargo, en C, un proceso puede guardar el valor del return que da la función fork(), ya que retorna el PID del hijo creado. 
Para saber su propio PID puede usar la función getpid(), incluyendo la librería “unistd.h”.


PREGUNTA 19:
Solamente se ejecutará en caso de que no se ejecute la linea execlp y por lo tanto su código no mute, es decir, solamente en caso de que execlp falle.


PREGUNTA 20:
Dentro del /proc/PID_PADRE hay los directorios attr, cwd, fd, fdinfo, map_files, net, ns, root y task.


PREGUNTA 21:
-status:

Name:	myPS
State:	R (running)
Tgid:	4142
Ngid:	0
Pid:	4142
PPid:	3124
TracerPid:	0
Uid:	1001	1001	1001	1001
Gid:	1001	1001	1001	1001
FDSize:	256
Groups:	4 24 27 30 46 113 128 1001 
NStgid:	4142
NSpid:	4142
NSpgid:	4142
NSsid:	3124
VmPeak:	    4324 kB
VmSize:	    4228 kB
VmLck:	       0 kB
VmPin:	       0 kB
VmHWM:	     644 kB
VmRSS:	     644 kB
VmData:	      56 kB
VmStk:	     136 kB
VmExe:	       4 kB
VmLib:	    1944 kB
VmPTE:	      28 kB
VmPMD:	      12 kB
VmSwap:	       0 kB
HugetlbPages:	       0 kB
Threads:	1
SigQ:	0/31338
SigPnd:	0000000000000000
ShdPnd:	0000000000000000
SigBlk:	0000000000000000
SigIgn:	0000000000000000
SigCgt:	0000000000000000
CapInh:	0000000000000000
CapPrm:	0000000000000000
CapEff:	0000000000000000
CapBnd:	0000003fffffffff
CapAmb:	0000000000000000
Seccomp:	0
Cpus_allowed:	ff
Cpus_allowed_list:	0-7
Mems_allowed:	00000000,00000001
Mems_allowed_list:	0
voluntary_ctxt_switches:	0
nonvoluntary_ctxt_switches:	157

-cmdline:
2e2f 6d79 5053 0072 6f62 00

-environ:
Son les mateixes que a l'env.

-estado de myPSC:
State:	R (running)

-tiempo de CPU consumido:


PREGUNTA 22:
lrwxrwxrwx 1 alumne alumne 0 oct  6 17:34 cwd -> /home/alumne/Desktop
Es decir cwd apunta donde está el proceso.

lrwxrwxrwx 1 alumne alumne 0 oct  6 17:34 exe -> /home/alumne/Desktop/myPS
Es decir exe apunta cual es el ejecutable que se está ejecutando.

Current Working Directory y Executable.


PREGUNTA 23:

	myPS.c
	
	padre:	
	cwd
cwd -> /home/alumne/Desktop/s3/lab	
	exe
exe -> /home/alumne/Desktop/s3/lab/myPS

	hijo:	
	cwd
cwd
	exe
exe
	
	myPS_v0.c
	
	padre:	
	cwd
cwd -> /home/alumne/Desktop/s3/lab
	exe
exe -> /home/alumne/Desktop/s3/lab/myPS_v0
	
	hijo:	
	cwd
cwd -> /home/alumne/Desktop/s3/lab
	exe
exe -> /home/alumne/Desktop/s3/lab/myPS_v0


PREGUNTA 24:
myPS.c
padre:
State:  R (running)
hijo:
State:  Z (zombie)

myPS_v0.c
padre:
State:  R (running)
hijo:
State:  R (running)


PREGUNTA 25:
Name:	ps
State:	Z (zombie)
Tgid:	5390
Ngid:	0
Pid:	5390
PPid:	5389
TracerPid:	0
Uid:	1001	1001	1001	1001
Gid:	1001	1001	1001	1001
FDSize:	0
Groups:	4 24 27 30 46 113 128 1001 
NStgid:	5390
NSpid:	5390
NSpgid:	5389
NSsid:	3124
Threads:	1
SigQ:	0/31338
SigPnd:	0000000000000000
ShdPnd:	0000000000000000
SigBlk:	0000000000000000
SigIgn:	0000000000000000
SigCgt:	00000001f3d1fef9
CapInh:	0000000000000000
CapPrm:	0000000000000000
CapEff:	0000000000000000
CapBnd:	0000003fffffffff
CapAmb:	0000000000000000
Seccomp:	0
Cpus_allowed:	ff
Cpus_allowed_list:	0-7
Mems_allowed:	00000000,00000001
Mems_allowed_list:	0
voluntary_ctxt_switches:	1
nonvoluntary_ctxt_switches:	1

cat: environ: permission denied (porque está zombie)
No hay salida si se ejecuta "cat cmdline"
Se encuentra en estado zombie. Está esperando a que el padre haga waitpid y pueda eliminar el PCB de la memoria. 


PREGUNTA 26:
Está en estado waiting.


PREGUNTA 27:
Después de escribir el comando del ejecutable he puesto “\> test1” cambiando el 1 por el número de test que era.
